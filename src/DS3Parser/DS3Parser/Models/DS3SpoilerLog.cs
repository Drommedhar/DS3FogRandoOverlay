using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DS3Parser.Models
{
    /// <summary>
    /// Represents the spoiler log data generated by the randomizer
    /// </summary>
    public class DS3SpoilerLog
    {
        /// <summary>
        /// The randomization seed
        /// </summary>
        public long Seed { get; set; }

        /// <summary>
        /// The randomization options that were used
        /// </summary>
        public List<string> Options { get; set; } = new List<string>();

        /// <summary>
        /// Whether key items were randomized
        /// </summary>
        public bool KeyItemsRandomized { get; set; }

        /// <summary>
        /// Key item hash if randomized
        /// </summary>
        public string KeyItemHash { get; set; } = string.Empty;

        /// <summary>
        /// Areas required to reach Firelink Shrine
        /// </summary>
        public List<string> RequiredAreas { get; set; } = new List<string>();

        /// <summary>
        /// All area entries with their connections
        /// </summary>
        public List<DS3SpoilerLogEntry> Entries { get; set; } = new List<DS3SpoilerLogEntry>();

        /// <summary>
        /// All connections between areas
        /// </summary>
        public List<DS3Connection> Connections { get; set; } = new List<DS3Connection>();

        /// <summary>
        /// Get entry by area name
        /// </summary>
        public DS3SpoilerLogEntry? GetEntry(string areaName)
        {
            return Entries.FirstOrDefault(e => e.AreaName == areaName);
        }

        /// <summary>
        /// Get all boss entries
        /// </summary>
        public List<DS3SpoilerLogEntry> GetBossEntries()
        {
            return Entries.Where(e => e.IsBoss).ToList();
        }

        /// <summary>
        /// Get connections from a specific area
        /// </summary>
        public List<DS3Connection> GetConnectionsFrom(string areaName)
        {
            return Connections.Where(c => c.FromArea == areaName).ToList();
        }

        /// <summary>
        /// Get connections to a specific area
        /// </summary>
        public List<DS3Connection> GetConnectionsTo(string areaName)
        {
            return Connections.Where(c => c.ToArea == areaName).ToList();
        }

        /// <summary>
        /// Get all random connections
        /// </summary>
        public List<DS3Connection> GetRandomConnections()
        {
            return Connections.Where(c => c.IsRandom).ToList();
        }

        /// <summary>
        /// Get all preexisting connections
        /// </summary>
        public List<DS3Connection> GetPreexistingConnections()
        {
            return Connections.Where(c => !c.IsRandom).ToList();
        }
    }
}
